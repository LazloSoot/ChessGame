// <auto-generated />
using System;
using Chess.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Chess.DataAccess.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20181216184634_PlayerExtention")]
    partial class PlayerExtention
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Chess.DataAccess.Entities.Game", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Fen");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("Chess.DataAccess.Entities.Move", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Fen");

                    b.Property<int?>("GameId");

                    b.Property<string>("MoveNext");

                    b.Property<int?>("PlayerId");

                    b.Property<int>("Ply");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("PlayerId");

                    b.ToTable("Moves");
                });

            modelBuilder.Entity("Chess.DataAccess.Entities.Player", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AvatarUrl");

                    b.Property<string>("Name");

                    b.Property<string>("Uid");

                    b.HasKey("Id");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("Chess.DataAccess.Entities.Side", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Color");

                    b.Property<int?>("GameId");

                    b.Property<bool>("IsDraw");

                    b.Property<bool>("IsResign");

                    b.Property<int?>("PlayerId");

                    b.Property<int>("Points");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("PlayerId");

                    b.ToTable("Sides");
                });

            modelBuilder.Entity("Chess.DataAccess.Entities.Move", b =>
                {
                    b.HasOne("Chess.DataAccess.Entities.Game", "Game")
                        .WithMany("Moves")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Chess.DataAccess.Entities.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId");
                });

            modelBuilder.Entity("Chess.DataAccess.Entities.Side", b =>
                {
                    b.HasOne("Chess.DataAccess.Entities.Game", "Game")
                        .WithMany("Sides")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Chess.DataAccess.Entities.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId");
                });
#pragma warning restore 612, 618
        }
    }
}
